

class Solution:
    def bfs(self, x, y, mat):
        if mat[x][y] == 0:
            self.sol[x][y] = 0
            return 0
        else:
            #上下左右
            dx = [0,0,-1,1]
            dy = [-1,1,0,0]
            mindist = inf
            for i in range(4):
                newx = x + dx[i]
                newy = y + dy[i]
                if(newy >= 0 and newy < self.row and newx >= 0 and newx < self.col):
                    mindist = min(self.bfs(newx, newy, mat) + 1, mindist) 
            
            self.sol[x][y] = mindist
            return mindist
        return
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        self.row = len(mat)
        self.col = len(mat[0])
        self.sol = [ [-1]*self.col for _ in range(self.row) ]  
        # print(self.sol)
        
        '''
        想法：
        sol[i][j] = 0 if mat[i][j] == 0 min(上, 下, 左, 右) 
        '''
        
        for r in range(self.row):
            for c in range(self.col):
                if self.sol[c][r] == -1: 
                    self.bfs(c, r, mat)
        
        return self.sol
