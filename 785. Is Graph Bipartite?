class Solution:
    def dfs(self, graph, mark, v):
        '''
        遞迴 call dfs()必須用判斷式的形式 -> 這樣return false才會傳遞回main function
        '''
        print(f'--{mark}, {v}--')
        
        for e in graph[v]: # each neighbor of vertice v
            print(f'each edge in {e}, {mark[e]}, {mark[v]},{mark[e]==mark[v]}')
            if mark[e] == mark[v]: 
                return False
            elif not mark[e]: 
                mark[e] = 'O' if mark[v] == 'X' else 'X'
                
                # not self.dfs(...) bc if return false nothing happens
                if not self.dfs(graph, mark, e): return False 
            
            
        
        return True
            
        
    def isBipartite(self, graph: List[List[int]]) -> bool:
        '''
        adjacency list graph(u,v) = (vertice, edge)
        想法：each vertice u and all its connected neighbor should be in different set
        i.e. A{0}, B{1,2,3}
        '''
        
        mark = [None] * len(graph) 
        
        for v in range(len(graph)):
            print(v)
            print(mark)
            if not mark[v]:
                mark[v] = 'O'
                if not self.dfs(graph, mark, v): return False
            
        
        return True
